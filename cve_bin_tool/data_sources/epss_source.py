from __future__ import annotations

import csv
import gzip
import logging
from io import StringIO

import aiohttp

from cve_bin_tool.error_handler import ErrorMode
from cve_bin_tool.log import LOGGER

logging.basicConfig(level=logging.DEBUG)


class Epss_Source:
    SOURCE = "Epss"
    LOGGER = LOGGER.getChild("CVEDB")
    DATA_SOURCE_LINK = "https://epss.cyentia.com/epss_scores-current.csv.gz"

    def __init__(self, error_mode=ErrorMode.TruncTrace):
        self.epss_data = None
        self.error_mode = error_mode

    # updating epss
    async def update_epss(self):
        await self.download_epss()
        return self.epss_data

    async def download_epss(self):
        self.epss_data = await self.download_epss_data()
        self.epss_data = self.parse_epss_data()

    async def download_epss_data(self):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(self.DATA_SOURCE_LINK) as response:
                    response.raise_for_status()
                    compressed_data = await response.read()
                    decompressed_data = gzip.decompress(compressed_data)
                    return decompressed_data
        except aiohttp.ClientError as e:
            raise Exception("Failed to download EPSS data.") from e

    def parse_epss_data(self):
        parsed_data = []
        decoded_data = self.epss_data.decode("utf-8")
        reader = csv.reader(StringIO(decoded_data), delimiter=",")
        next(reader)
        next(reader)
        for row in reader:
            cve_id, epss_score, epss_percentile = row[:3]
            parsed_data.append((cve_id, "1", epss_score, epss_percentile))
        return parsed_data
