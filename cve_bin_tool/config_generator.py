class config_generator:
    def config_generate_yaml(args):
        yaml_str = f"""
            # This is an automatically generated configuration file for the CVE Binary Tool. It allows you to customize and manage the tool to suit your needs.
            # Please exercise caution when editing this file and follow the instructions provided.
            # To generate a new configuration file, use the --generate-config option. For more information, please refer to the official CVE Binary Tool documentation at https://cve-bin-tool.readthedocs.io/en/latest/.
            # This file enables you to specify options such as the installation directory of the tool, the data sources to be used, and other relevant settings. To make changes, simply modify the values to the right of the colon sign.
            # For more information on the available options and how to configure them, please refer to the official documentation at https://cve-bin-tool.readthedocs.io/en/latest/.
            # If you support the project and wish to contribute, you can find the official CVE Binary Tool Contributor Guide at https://cve-bin-tool.readthedocs.io/en/latest/CONTRIBUTING.html#cve-binary-tool-contributor-guide.
            # And link for project github https://github.com/intel/cve-bin-tool
            cve_data_download:
              #set your nvd api key
              nvd_api_key: {args["nvd_api_key"]}
              # choose method for getting CVE lists from NVD (default: api) other option available api2, json
              nvd: {args["nvd"]}
              # update schedule for data sources and exploits database (default: daily)
              update: {args["update"]}
            input:
              # Directory to scan
              directory: {args["directory"]}
              # To supplement triage data of previous scan or run standalone as csv2cve
              # Currently we only support csv and json file.
              input_file: {args["input_file"]}
              # provide config file
              config: {args["config"]}
              # specify type of software bill of materials (sbom) (default: spdx) other option are cyclonedx, swid
              sbom: {args["sbom"]}
              # provide sbom filename
              sbom_file: {args["sbom_file"]}
            checker:
              # list of checkers you want to skip
              skips: {args["skips"]}
              # list of checkers you want to run
              runs: {args["runs"]}
            output:
              # specify output verbosity from [debug, info, warning, error, critical]
              # verbosity will decreases as you go left to right (default: info)
              log_level: {args["log_level"]}
              # if true then we don't display any output and
              # only exit-code with number of cves get returned
              # overwrites setting specified in log_level
              # Note: it's lowercase true or false
              quiet: {args["quiet"]}
              # specify one of an output format: [csv, json, html, console] (default: console)
              format: {args["format"]}
              # provide output filename (optional)
              # if not specified we will generate one according to output format specified
              output_file: '{args["output_file"]}'
              # specify minimum CVE severity level to report from [low, medium, high, critical] (default: low)
              severity: {args["severity"]}
              # specify minimum CVSS score to report from integer range 0 to 10 (default: 0)
              cvss: {args["cvss"]}
              # Produces a report even if there are no CVE for the respective output format
              report: {args["report"]}
              # Provide vulnerability exchange (vex) filename
              vex: {args["vex"]}
            other:
              # set true if you want to skip checking for newer version
              disable_version_check: {args["disable_version_check"]}
              # set true if you want to autoextract archive files. (default: true)
              extract: {args["extract"]}
              # operate in offline mode
              offline: {args["offline"]}
            merge_report:
              # save output as intermediate report in json format
              append: {args["append"]}
              # add a unique tag to differentiate between multiple intermediate reports
              tag: {args["tag"]}
              # comma separated intermediate reports path for merging
              merge: {args["merge"]}
              # comma separated tag string for filtering intermediate reports
              filter: {args["filter"]}
            database:
              # export database filename
              export: {args["export"]}
              # import database filename
              import: {args["import"]}
            exploit:
              # check for exploits from found cves
              exploits: {args["exploits"]}
            deprecated:
              # autoextract compressed files
              extract: {args["extract"]}
              """
        f = open("config.yaml", "w")
        f.write(yaml_str)
        f.close()

    def config_generate_toml(args):
        toml_str = f"""
            # This is an automatically generated configuration file for the CVE Binary Tool. It allows you to customize and manage the tool to suit your needs.
            # Please exercise caution when editing this file and follow the instructions provided.
            # To generate a new configuration file, use the --generate-config option. For more information, please refer to the official CVE Binary Tool documentation at https://cve-bin-tool.readthedocs.io/en/latest/.
            # This file enables you to specify options such as the installation directory of the tool, the data sources to be used, and other relevant settings. To make changes, simply modify the values to the right of the equal sign.
            # For more information on the available options and how to configure them, please refer to the official documentation at https://cve-bin-tool.readthedocs.io/en/latest/.
            # If you support the project and wish to contribute, you can find the official CVE Binary Tool Contributor Guide at https://cve-bin-tool.readthedocs.io/en/latest/CONTRIBUTING.html#cve-binary-tool-contributor-guide.
            # And link for project github https://github.com/intel/cve-bin-tool
            [cve_data_download]
              #set your nvd api key
              nvd_api_key = "{args["nvd_api_key"]}"
              # choose method for getting CVE lists from NVD (default: api) other option available api2, json
              nvd = "{args["nvd"]}"
              # update schedule for data sources and exploits database (default: daily)
              update = "{args["update"]}"
            [input]
              # Directory to scan
              directory = "{args["directory"]}"
              # To supplement triage data of previous scan or run standalone as csv2cve
              # Currently we only support csv and json file.
              input_file = "{args["input_file"]}"
              # provide config file
              config = "{args["config"]}"
              # specify type of software bill of materials (sbom) (default: spdx) other option are cyclonedx, swid
              sbom = "{args["sbom"]}"
              # provide sbom filename
              sbom_file = "{args["sbom_file"]}"
            [checker]
              # list of checkers you want to skip
              skips = "{args["skips"]}"
              # list of checkers you want to run
              runs = "{args["runs"]}"
            [output]
              # specify output verbosity from [debug, info, warning, error, critical]
              # verbosity will decreases as you go left to right (default: info)
              log_level = "{args["log_level"]}"
              # if true then we don't display any output and
              # only exit-code with number of cves get returned
              # overwrites setting specified in log_level
              # Note: it's lowercase true or false
              quiet = "{args["quiet"]}"
              # specify one of an output format: [csv, json, html, console] (default: console)
              format = "{args["format"]}"
              # provide output filename (optional)
              # if not specified we will generate one according to output format specified
              output_file = "{args["output_file"]}"
              # specify minimum CVE severity level to report from [low, medium, high, critical] (default: low)
              severity = "{args["severity"]}"
              # specify minimum CVSS score to report from integer range 0 to 10 (default: 0)
              cvss = {args["cvss"]}
              # Produces a report even if there are no CVE for the respective output format
              report = "{args["report"]}"
              # Provide vulnerability exchange (vex) filename
              vex = "{args["vex"]}"
            [other]
              # set true if you want to skip checking for newer version
              disable_version_check = "{args["disable_version_check"]}"
              # set true if you want to autoextract archive files. (default: true)
              extract = "{args["extract"]}"
              # operate in offline mode
              offline = "{args["offline"]}"
            [merge_report]
              # save output as intermediate report in json format
              append = "{args["append"]}"
              # add a unique tag to differentiate between multiple intermediate reports
              tag = "{args["tag"]}"
              # comma separated intermediate reports path for merging
              merge = "{args["merge"]}"
              # comma separated tag string for filtering intermediate reports
              filter = "{args["filter"]}"
            [database]
              # export database filename
              export = "{args["export"]}"
              # import database filename
              import = "{args["import"]}"
            [exploit]
              # check for exploits from found cves
              exploits = "{args["exploits"]}"
            [deprecated]
              # autoextract compressed files
              extract = "{args["extract"]}"
          """
        f = open("config.toml", "w")
        f.write(toml_str)
        f.close()
